/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * e-commerce
 * The e-commerce api
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export type ProductControllerGetProductsParams = {
  query?: string;
};

export interface UpdateProductDto {
  categoryId: string;
  description: string;
  imageUrl: string;
  name: string;
  price: string;
  stock_quantity: number;
}

export interface CreateProductDto {
  categoryId: string;
  description: string;
  imageUrl?: string;
  name: string;
  price: string;
  stock_quantity?: number;
}

export interface GetProductDto {
  categoryId: string;
  description: string;
  id: string;
  imageUrl: string;
  name: string;
  price: number;
  stock_quantity: number;
}

export interface UpdateCategoryDto {
  description?: string;
  name?: string;
}

export interface GetCategoryDto {
  description: string;
  id: string;
  imageUrl: string;
  name: string;
}

export interface CreateCategoryDto {
  description?: string;
  name: string;
}

export interface AddProductToCart {
  productId: string;
  quantity: number;
}

export interface CartItemCartProductField {
  imageUrl: string;
  name: string;
  price: string;
}

export interface GetCartItemDto {
  id: string;
  product: CartItemCartProductField;
  productId: string;
  productName: string;
  quantity: number;
}

export interface GetCartDto {
  cartItems: GetCartItemDto[];
  createdAt: string;
  id: string;
  updatedAt: string;
  userId: string;
}

export interface GetSessionInfoDto {
  [key: string]: any;
}

export interface SignInDto {
  email: string;
  password: string;
}

export interface SignUpDto {
  email: string;
  password: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerSignUp = (
  signUpDto: BodyType<SignUpDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signUpDto
    },
    options
  );
};

export const authControllerSignIn = (
  signInDto: BodyType<SignInDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signInDto
    },
    options
  );
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: 'POST' },
    options
  );
};

export const authControllerGetSession = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetSessionInfoDto>(
    { url: `/auth/session`, method: 'GET' },
    options
  );
};

export const cartControllerGetCart = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetCartDto>({ url: `/cart`, method: 'GET' }, options);
};

export const cartControllerAddProductToCart = (
  addProductToCart: BodyType<AddProductToCart>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetCartDto>(
    {
      url: `/cart`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addProductToCart
    },
    options
  );
};

export const cartControllerRemoveProductFromCart = (
  addProductToCart: BodyType<AddProductToCart>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetCartDto>(
    {
      url: `/cart`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: addProductToCart
    },
    options
  );
};

export const categoryControllerCreate = (
  createCategoryDto: BodyType<CreateCategoryDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/category`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createCategoryDto
    },
    options
  );
};

export const categoryControllerFindAll = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetCategoryDto[]>(
    { url: `/category`, method: 'GET' },
    options
  );
};

export const categoryControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetCategoryDto>(
    { url: `/category/${id}`, method: 'GET' },
    options
  );
};

export const categoryControllerUpdate = (
  id: string,
  updateCategoryDto: BodyType<UpdateCategoryDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetCategoryDto>(
    {
      url: `/category/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateCategoryDto
    },
    options
  );
};

export const categoryControllerRemove = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetCategoryDto>(
    { url: `/category/${id}`, method: 'DELETE' },
    options
  );
};

export const productControllerGetProducts = (
  params?: ProductControllerGetProductsParams,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetProductDto[]>(
    { url: `/product`, method: 'GET', params },
    options
  );
};

export const productControllerCreate = (
  createProductDto: BodyType<CreateProductDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/product`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createProductDto
    },
    options
  );
};

export const productControllerGetProduct = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetProductDto>(
    { url: `/product/${id}`, method: 'GET' },
    options
  );
};

export const productControllerUpdate = (
  id: string,
  updateProductDto: BodyType<UpdateProductDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetProductDto>(
    {
      url: `/product/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateProductDto
    },
    options
  );
};

export const productControllerRemove = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetProductDto>(
    { url: `/product/${id}`, method: 'DELETE' },
    options
  );
};

export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSession>>
>;
export type CartControllerGetCartResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerGetCart>>
>;
export type CartControllerAddProductToCartResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerAddProductToCart>>
>;
export type CartControllerRemoveProductFromCartResult = NonNullable<
  Awaited<ReturnType<typeof cartControllerRemoveProductFromCart>>
>;
export type CategoryControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof categoryControllerCreate>>
>;
export type CategoryControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof categoryControllerFindAll>>
>;
export type CategoryControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof categoryControllerFindOne>>
>;
export type CategoryControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof categoryControllerUpdate>>
>;
export type CategoryControllerRemoveResult = NonNullable<
  Awaited<ReturnType<typeof categoryControllerRemove>>
>;
export type ProductControllerGetProductsResult = NonNullable<
  Awaited<ReturnType<typeof productControllerGetProducts>>
>;
export type ProductControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof productControllerCreate>>
>;
export type ProductControllerGetProductResult = NonNullable<
  Awaited<ReturnType<typeof productControllerGetProduct>>
>;
export type ProductControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof productControllerUpdate>>
>;
export type ProductControllerRemoveResult = NonNullable<
  Awaited<ReturnType<typeof productControllerRemove>>
>;
